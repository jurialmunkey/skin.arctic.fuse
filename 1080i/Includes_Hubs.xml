<?xml version="1.0" encoding="UTF-8"?>
<includes>

    <include name="Hub_Slide_Group_WidgetsUp">
        <animation effect="slide" time="400" end="0" start="0,hub_group_widgetup_s" tween="quadratic" easing="out" reversible="false" condition="String.IsEmpty(Window.Property(Slide.WidgetContainer))">Conditional</animation>
        <animation effect="slide" time="400" end="0,hub_group_widgetup_s" start="0" tween="quadratic" easing="out" reversible="false" condition="!String.IsEmpty(Window.Property(Slide.WidgetContainer))">Conditional</animation>
    </include>

    <include name="Hub_Slide_Spotlight_NoFocus">
        <animation effect="slide" start="0" end="0,380" time="400" tween="quadratic" reversible="false" condition="[[Control.HasFocus(370) | ControlGroup(310).HasFocus() | Control.HasFocus(333)] | [[Control.HasFocus(303) | Control.HasFocus(308) | Control.HasFocus(309)] + !Integer.IsEqual(Window.Property(List.ViewContainer),300) + !Integer.IsEqual(Window.Property(List.ViewContainer),302) + Integer.IsEqual(Window.Property(TMDBHelper.WidgetContainer),301)]]">Conditional</animation>
        <animation effect="slide" end="0" start="0,380" time="400" tween="quadratic" reversible="false" condition="![[Control.HasFocus(370) | ControlGroup(310).HasFocus() | Control.HasFocus(333)] | [[Control.HasFocus(303) | Control.HasFocus(308) | Control.HasFocus(309)] + !Integer.IsEqual(Window.Property(List.ViewContainer),300) + !Integer.IsEqual(Window.Property(List.ViewContainer),302) + Integer.IsEqual(Window.Property(TMDBHelper.WidgetContainer),301)]]">Conditional</animation>

        <animation effect="slide" start="0" end="0,-380" time="400" tween="quadratic" reversible="false" condition="[[Control.HasFocus(370) | ControlGroup(310).HasFocus() | Control.HasFocus(333)] | [[Control.HasFocus(303) | Control.HasFocus(308) | Control.HasFocus(309)] + !Integer.IsEqual(Window.Property(List.ViewContainer),300) + !Integer.IsEqual(Window.Property(List.ViewContainer),302) + Integer.IsEqual(Window.Property(TMDBHelper.WidgetContainer),301)]]">WindowClose</animation>
        <animation effect="slide" end="0" start="0,-380" time="400" tween="quadratic" reversible="false" condition="[[Control.HasFocus(370) | ControlGroup(310).HasFocus() | Control.HasFocus(333)] | [[Control.HasFocus(303) | Control.HasFocus(308) | Control.HasFocus(309)] + !Integer.IsEqual(Window.Property(List.ViewContainer),300) + !Integer.IsEqual(Window.Property(List.ViewContainer),302) + Integer.IsEqual(Window.Property(TMDBHelper.WidgetContainer),301)]]">WindowOpen</animation>
    </include>

    <include name="Hub_Slide_Group_NoSpotlight">
        <animation effect="slide" time="400" end="0" start="0,hub_group_nospotlight_s" tween="quadratic" easing="out" reversible="false" condition="![!$EXP[Exp_Hubs_Spotlight_HasItems] + $EXP[Exp_Hubs_Spotlight_IsVisible]]">Conditional</animation>
        <animation effect="slide" time="400" end="0,hub_group_nospotlight_s" start="0" tween="quadratic" easing="out" reversible="false" condition="!$EXP[Exp_Hubs_Spotlight_HasItems] + $EXP[Exp_Hubs_Spotlight_IsVisible]">Conditional</animation>
    </include>

    <include name="Hub_WindowTransition_WidgetsGroup">
        <animation effect="slide" start="0" end="0,hub_group_widgetup_s" time="400" tween="quadratic" reversible="false" condition="$EXP[Exp_Hubs_Spotlight_HasItems] + $EXP[Exp_Hubs_Spotlight_IsVisible]">WindowClose</animation>
        <animation effect="slide" end="0" start="0,hub_group_widgetup_s" time="400" tween="quadratic" reversible="false" condition="$EXP[Exp_Hubs_Spotlight_HasItems] + $EXP[Exp_Hubs_Spotlight_IsVisible]">WindowOpen</animation>
    </include>

    <include name="Hub_WindowTransition_CategoriesSpotlightGroup">
        <animation effect="fade" start="100" end="0" time="200" tween="sine" easing="in" reversible="false" condition="$EXP[Exp_Hubs_Spotlight_HasItems] + $EXP[Exp_Hubs_Spotlight_IsVisible]">WindowClose</animation>
        <animation effect="fade" end="100" start="0" time="400" tween="sine" easing="in" reversible="false" condition="$EXP[Exp_Hubs_Spotlight_HasItems] + $EXP[Exp_Hubs_Spotlight_IsVisible]">WindowOpen</animation>
    </include>

    <variable name="Hub_Submenu_Highlight">
        <value condition="!String.IsEmpty(Container(302).ListItem.Property(useWidgetList)) + [!String.IsEmpty(Container(302).ListItem.Property(widgetPath)) | !String.IsEmpty(Container(302).ListItem.Property(list))]">main_fg_90</value>
        <value condition="String.IsEmpty(Container(300).ListItem.Property(useWidgetList)) + String.IsEmpty(Container(302).ListItem.Property(widgetPath)) + String.IsEmpty(Container(302).ListItem.Property(list)) + !String.IsEmpty(Container(302).ListItem.FolderPath)">main_fg_90</value>
        <value>main_fg_30</value>
    </variable>

    <include name="Hub_Submenu_List">
        <param name="ondown">340</param>
        <param name="hidden_button">List_ButtonMenu_Row_HiddenButton_View</param>
        <definition>
            <include content="Categories_Selector">
                <param name="id">$PARAM[id]</param>
                <param name="window_id">$PARAM[window_id]</param>
                <param name="font">font_mini</param>
                <param name="color_fo">$VAR[Hub_Submenu_Highlight]</param>
                <param name="color_nf">main_fg_30</param>
                <param name="hidden_button">$PARAM[hidden_button]</param>
                <param name="hidden_button_prefix">$PARAM[hidden_button_prefix]</param>
                <param name="slide">Skin.HasSetting(Slide.WidgetContainer)</param>
                <param name="hitrect_x">40</param>
                <param name="hitrect_y">40</param>
                <param name="hitrect_w">1640</param>
                <param name="hitrect_h">80</param>
                <top>0</top>
                <left>240</left>
                <height>240</height>
                <onup>300</onup>
                <ondown>$PARAM[ondown]</ondown>
                <onfocus>SetProperty(TMDbHelper.WidgetContainer,301,$PARAM[window_id])</onfocus>

                <include content="Action_View_Movement_OnLeftRight">
                    <param name="id">$PARAM[id]</param>
                    <param name="onback">[Integer.IsEqual(Container($PARAM[id]).CurrentItem,1)]</param>
                    <param name="backid">320</param>
                </include>

                <animation effect="slide" time="400" start="0,-20" end="0" tween="quadratic" easing="out" reversible="false" condition="![!Container(302).IsUpdating + Integer.IsEqual(Container(302).NumItems,0) + Integer.IsEqual(Window.Property(TMDBHelper.WidgetContainer),301)]">Conditional</animation>
                <animation effect="slide" time="400" start="0" end="0,-20" tween="quadratic" easing="out" reversible="false" condition="!Container(302).IsUpdating + Integer.IsEqual(Container(302).NumItems,0) + Integer.IsEqual(Window.Property(TMDBHelper.WidgetContainer),301)">Conditional</animation>

                <animation effect="slide" time="400" end="0" start="0,20" tween="quadratic" easing="out" reversible="false" condition="![!String.IsEmpty(Window.Property(Slide.WidgetContainer)) | !$EXP[Exp_Hubs_Spotlight_HasItems]]">Conditional</animation>
                <animation effect="slide" time="400" end="0,20" start="0" tween="quadratic" easing="out" reversible="false" condition="!String.IsEmpty(Window.Property(Slide.WidgetContainer)) | !$EXP[Exp_Hubs_Spotlight_HasItems]">Conditional</animation>

                <nested />
            </include>
        </definition>
    </include>

    <include name="Hub_Submenu_Group">
        <control type="group" id="3000">
            <visible>!$EXP[Exp_InfoDialogs]</visible>
            <include>Animation_Transition_InfoPanel_Hide</include>
            <include>Transitions_Lower_Visibility</include>
            <top>hub_submenuwidget_t</top>
            <height>hub_submenuwidget_h</height>
            <left>view_button_left</left>
            <orientation>vertical</orientation>
            <include>Hub_WindowTransition_CategoriesSpotlightGroup</include>

            <nested />
        </control>
    </include>

    <include name="Hub_Menu_Group">
        <param name="widgets_only">false</param>
        <definition>
            <control type="group">
                <include>Animation_Half_WindowChange_UpDown</include>
                <include condition="![$PARAM[widgets_only]]">Hub_Slide_Group_NoSpotlight</include>
                <include>Hub_Slide_Group_WidgetsUp</include>
                <nested />
            </control>
        </definition>
    </include>

    <include name="Hub_Widget_Splash">
        <control type="group">
            <visible>[Skin.HasSetting(Startup.WaitForLoad) + [[Integer.IsEqual(Container(301).NumItems,0) + Container(301).IsUpdating] | [Container(303).IsUpdating + Integer.IsEqual(Container(303).NumItems,0)]]]</visible>
            <visible>System.HasAlarm(SplashTimeOut)</visible>
            <include>Background_StartUp</include>
            <include>Object_StartUp_Logo</include>
            <control type="label">
                <centertop>610</centertop>
                <height>40</height>
                <aligny>center</aligny>
                <align>center</align>
                <textcolor>main_logo</textcolor>
                <label>$LOCALIZE[31427] [LOWERCASE]$LOCALIZE[31103][/LOWERCASE]...</label>
            </control>
            <control type="group">
                <centertop>750</centertop>
                <height>80</height>
                <include content="Object_BusySpinner">
                    <param name="colordiffuse">main_fg</param>
                    <param name="haslabel">false</param>
                </include>
            </control>
        </control>
    </include>

    <include name="Hub_SpotlightFanart">
        <control type="image">
            <aspectratio>scale</aspectratio>
            <fadetime>background_fadetime</fadetime>
            <texture background="true">$VAR[Image_FullscreenWidget_Artwork]</texture>
            <include>Background_NotVideo</include>
            <include content="Animation_Fade_In">
                <param name="type">WindowOpen</param>
            </include>
            <include content="Animation_Fade_Out">
                <param name="type">WindowClose</param>
            </include>
            <animation effect="fade" start="0" end="100" time="background_fadetime" delay="background_fadetime">Visible</animation>
            <animation effect="fade" start="100" end="0" time="background_fadetime" delay="background_fadetime">Hidden</animation>
            <visible>Integer.IsEqual(Window.Property(TMDBHelper.WidgetContainer),301) + !Integer.IsEqual(Container(301).NumItems,0) + Skin.HasSetting(Background.EnableSpotlightFanart)</visible>
            <visible>[[Control.HasFocus(370) | ControlGroup(310).HasFocus() | Control.HasFocus(333)] | [[Control.HasFocus(303) | Control.HasFocus(308) | Control.HasFocus(309)] + !Integer.IsEqual(Window.Property(List.ViewContainer),300) + !Integer.IsEqual(Window.Property(List.ViewContainer),302) + Integer.IsEqual(Window.Property(TMDBHelper.WidgetContainer),301)]]</visible>
        </control>
    </include>

    <include name="Hub_Refocus_Buttons">
        <include content="Object_Hidden_Button">
            <param name="id">309</param>
            <onfocus condition="!Window.IsVisible(Home) | Skin.String(Home.SideMenuCollapse,Always)">SetFocus(303,1,absolute)</onfocus>
            <onfocus condition="Window.IsVisible(Home) + !Skin.String(Home.SideMenuCollapse,Topbar)">SetFocus(303,$VAR[Action_Default_HomeFocus],absolute)</onfocus>
            <onfocus condition="Window.IsVisible(Home) + Skin.String(Home.SideMenuCollapse,Topbar)">SetFocus(370,$VAR[Action_Default_HomeFocus],absolute)</onfocus>

            <onleft condition="!Window.IsVisible(Home) | Skin.String(Home.SideMenuCollapse,Always)">SetFocus(303,1,absolute)</onleft>
            <onleft condition="Window.IsVisible(Home) + !Skin.String(Home.SideMenuCollapse,Topbar)">SetFocus(303,$VAR[Action_Default_HomeFocus],absolute)</onleft>
            <onleft condition="Window.IsVisible(Home) + Skin.String(Home.SideMenuCollapse,Topbar)">SetFocus(370,$VAR[Action_Default_HomeFocus],absolute)</onleft>

            <onright condition="!Window.IsVisible(Home) | Skin.String(Home.SideMenuCollapse,Always)">SetFocus(303,1,absolute)</onright>
            <onright condition="Window.IsVisible(Home) + !Skin.String(Home.SideMenuCollapse,Topbar)">SetFocus(303,$VAR[Action_Default_HomeFocus],absolute)</onright>
            <onright condition="Window.IsVisible(Home) + Skin.String(Home.SideMenuCollapse,Topbar)">SetFocus(370,$VAR[Action_Default_HomeFocus],absolute)</onright>

            <ondown condition="!Window.IsVisible(Home) | Skin.String(Home.SideMenuCollapse,Always)">SetFocus(303,1,absolute)</ondown>
            <ondown condition="Window.IsVisible(Home) + !Skin.String(Home.SideMenuCollapse,Topbar)">SetFocus(303,$VAR[Action_Default_HomeFocus],absolute)</ondown>
            <ondown condition="Window.IsVisible(Home) + Skin.String(Home.SideMenuCollapse,Topbar)">SetFocus(370,$VAR[Action_Default_HomeFocus],absolute)</ondown>

            <onup condition="!Window.IsVisible(Home) | Skin.String(Home.SideMenuCollapse,Always)">SetFocus(303,1,absolute)</onup>
            <onup condition="Window.IsVisible(Home) + !Skin.String(Home.SideMenuCollapse,Topbar)">SetFocus(303,$VAR[Action_Default_HomeFocus],absolute)</onup>
            <onup condition="Window.IsVisible(Home) + Skin.String(Home.SideMenuCollapse,Topbar)">SetFocus(370,$VAR[Action_Default_HomeFocus],absolute)</onup>

            <onclick condition="!Window.IsVisible(Home) | Skin.String(Home.SideMenuCollapse,Always)">SetFocus(303,1,absolute)</onclick>
            <onclick condition="Window.IsVisible(Home) + Skin.String(Home.SideMenuCollapse,Library)">SetFocus(303,$VAR[Action_Default_HomeFocus],absolute)</onclick>
            <onclick condition="Window.IsVisible(Home) + Skin.String(Home.SideMenuCollapse,Topbar)">SetFocus(370,$VAR[Action_Default_HomeFocus],absolute)</onclick>
        </include>

        <include content="Object_Hidden_Button">
            <param name="id">308</param>
            <onfocus>SetFocus(303)</onfocus>
            <onfocus>ActivateWindow(1170)</onfocus>
        </include>
    </include>

    <include name="Hub_Controls">
        <param name="fullscreen_content">$VAR[Path_Spotlight_Fallback_Content]</param>
        <param name="fullscreen_target">$VAR[Path_Spotlight_Fallback_Target]</param>
        <param name="fullscreen_sortby">random</param>
        <param name="widgets_only">false</param>
        <param name="include">Hub_Standard</param>
        <definition>

            <include>Hub_Refocus_Buttons</include>
            <include>View_Bumper</include>
            <include condition="![$PARAM[widgets_only]]">Spotlight_Fallback_Slideshow</include>
            <include>Defs_TMDbHelper_Loader</include>

            <include content="Background_Main">
                <param name="include_layer">Hub_SpotlightFanart</param>
            </include>

            <include>Background_Transition</include>

            <include content="Hub_Main_Group">
                <param name="widgets_only">[$PARAM[widgets_only]]</param>

                <include condition="Window.IsVisible(Home) + Skin.HasSetting(Background.EnableSpotlightFanart) + !Skin.HasSetting(Hub.Home.DisableSubmenu)">Hub_Slide_Spotlight_NoFocus</include>

                <include content="Hub_Menu_Group" condition="![$PARAM[widgets_only]]">
                    <include content="Hub_Categories">
                        <param name="categories">$PARAM[categories]</param>
                        <param name="window_id">$PARAM[window_id]</param>
                    </include>
                </include>
                <include content="Spotlight_List" condition="![$PARAM[widgets_only]]">
                    <param name="window_id">$PARAM[window_id]</param>
                    <param name="sortby">$PARAM[fullscreen_sortby]</param>
                    <param name="sortorder">$PARAM[fullscreen_sortorder]</param>
                    <param name="target">$PARAM[fullscreen_target]</param>
                    <param name="limit">$PARAM[fullscreen_limit]</param>
                    <param name="browse">never</param>
                    <param name="content">$PARAM[fullscreen_content]</param>
                    <visible>String.IsEmpty(Container(300).ListItem.Property(spotlight_path))</visible>
                    <visible>String.IsEmpty(Container(303).ListItem.Property(spotlight_path))</visible>
                    <visible>String.IsEmpty(Container(370).ListItem.Property(spotlight_path))</visible>
                </include>
                <include content="$PARAM[include]" condition="![$PARAM[widgets_only]]">
                    <param name="categories">$PARAM[categories]</param>
                    <param name="window_id">$PARAM[window_id]</param>
                </include>
                <include content="Hub_Widgets_Only" condition="$PARAM[widgets_only]">
                    <param name="widgets_include">$PARAM[widgets_include]</param>
                </include>
            </include>

            <include>Widget_Transitions</include>

            <!-- Side Fade -->
            <include>Home_Fade</include>

            <!-- Furniture -->
            <control type="group">
                <visible>!$EXP[Exp_InfoDialogs]</visible>
                <include>Animation_View_WindowChange</include>
                <include>Hub_Widgets_Group_Furniture</include>
                <include>Animation_Group_Bumper</include>
                <include condition="![Window.IsVisible(Home) + Skin.String(Home.SideMenuCollapse,Topbar)]">Furniture_Top</include>
                <include condition="Window.IsVisible(Home) + Skin.String(Home.SideMenuCollapse,Topbar)">Hub_TopBar_Categories</include>
            </control>

            <nested />

            <!-- SideMenu -->
            <include>Home_Menu</include>

            <!-- Plot Dialog Overlay -->
            <include>View_Dialog_VideoPIP</include>
            <include>View_Dialog_Plot</include>

            <include>TouchMode_Hub_Zones</include>
        </definition>
    </include>

    <include name="Hub_TopBar_Categories">
        <control type="group">
            <include content="Animation_ConditionalFade">
                <param name="condition">![Control.HasFocus(370) | Control.HasFocus(333)]</param>
            </include>
            <include content="Animation_Fade_In">
                <param name="type">WindowClose</param>
            </include>
            <include content="Animation_Fade_Out">
                <param name="type">WindowOpen</param>
            </include>
            <include content="Furniture_Top">
                <param name="label">$INFO[Container(370).ListItem.Label]</param>
            </include>
        </control>
        <control type="group">
            <visible>![Control.HasFocus(370) | Control.HasFocus(333)]</visible>
            <include content="Animation_Fade_In">
                <param name="type">Visible</param>
            </include>
            <include content="Animation_Fade_Out">
                <param name="type">Hidden</param>
            </include>
            <include content="Furniture_Top">
                <param name="label">$INFO[Container(370).ListItem.Label]</param>
            </include>
        </control>
        <control type="group">
            <include content="Animation_Fade_In">
                <param name="type">WindowOpen</param>
                <param name="condition">Control.HasFocus(370)</param>
            </include>
            <include content="Animation_Fade_Out">
                <param name="type">WindowClose</param>
                <param name="condition">Control.HasFocus(370)</param>
            </include>
            <control type="list" id="370">
                <visible allowhiddenfocus="true">Control.HasFocus(370) | Control.HasFocus(333)</visible>
                <include content="Animation_Fade_In">
                    <param name="type">Visible</param>
                </include>
                <include content="Animation_Fade_Out">
                    <param name="type">Hidden</param>
                </include>

                <onup>SetProperty(List.ViewContainer,$NUMBER[370])</onup>
                <onup>SetFocus(333)</onup>
                <ondown>SetFocus(303,0,absolute)</ondown>

                <oninfo>ActivateWindow(1170)</oninfo>
                <onback condition="Window.IsVisible(Home)">SetFocus(308)</onback>

                <!-- <include content="Action_Widget_Top">
                    <param name="id">370</param>
                </include> -->
                <!-- <ondown condition="!Integer.IsEqual(Container(301).NumItems,0)">311</ondown>
                <ondown condition="Integer.IsEqual(Container(301).NumItems,0) + !Integer.IsEqual(Container(300).NumItems,0)">300</ondown>
                <ondown condition="Integer.IsEqual(Container(301).NumItems,0) + Integer.IsEqual(Container(300).NumItems,0)">$INFO[Container(370).ListItem.Property(widgets_setfocus)]</ondown> -->
                <top>20</top>
                <left>120</left>
                <height>200</height>
                <width>440</width>
                <orientation>horizontal</orientation>
                <scrolltime tween="quadratic">400</scrolltime>
                <include content="Home_Menu_List_ItemLayout">
                    <param name="id">370</param>
                    <param name="hidden_button">Home_Menu_List_HiddenButton</param>
                    <param name="hidden_button_enabled">[Window.IsVisible(Home) + Skin.HasSetting(Hub.Home.DisableSubmenu)]</param>
                    <param name="itemlayout_w">100</param>
                    <param name="vertical">false</param>
                </include>
                <content>
                    <include>skinvariables-sidemenu-staticitems</include>
                </content>
            </control>
            <control type="group">
                <top>80</top>
                <left>160</left>
                <height>40</height>
                <width>420</width>
                <control type="image">
                    <texture colordiffuse="main_fg_30">special://skin/extras/icons/angle-left.png</texture>
                    <height>40</height>
                    <width>40</width>
                    <left>-40</left>
                    <centertop>50%</centertop>
                    <visible>Container(370).HasPrevious</visible>
                    <visible>Control.HasFocus(370)</visible>
                    <include content="Animation_Fade_In">
                        <param name="type">Visible</param>
                    </include>
                    <include content="Animation_Fade_Out">
                        <param name="type">Hidden</param>
                    </include>
                </control>
                <control type="image">
                    <texture colordiffuse="main_fg_30" flipx="true">special://skin/extras/icons/angle-left.png</texture>
                    <height>40</height>
                    <width>40</width>
                    <right>-40</right>
                    <centertop>50%</centertop>
                    <visible>Container(370).HasNext</visible>
                    <visible>Control.HasFocus(370)</visible>
                    <include content="Animation_Fade_In">
                        <param name="type">Visible</param>
                    </include>
                    <include content="Animation_Fade_Out">
                        <param name="type">Hidden</param>
                    </include>
                </control>
            </control>
        </control>
    </include>

    <include name="Hub_Widgets_Only">
        <include>Background_Transition</include>
        <include content="Hub_Widgets_Group">
            <include content="Home_Widgets_Infopanel">
                <include content="Info_Panel">
                    <param name="container">Container.</param>
                </include>
            </include>
            <include>$PARAM[widgets_include]</include>
        </include>
    </include>

    <variable name="Hub_Submenu_Content">
        <value condition="!String.IsEmpty(Container(300).ListItem.Property(submenulist_path))">$INFO[Container(300).ListItem.Property(submenulist_path)]</value>
        <value>plugin://script.skinvariables/?info=get_shortcuts_node$INFO[Container(300).ListItem.Property(menu),&amp;menu=,]$INFO[Container(300).ListItem.Property(list),&amp;node=,]$INFO[Container(300).ListItem.Property(skin),&amp;skin=,]$INFO[Window(Home).Property(SkinVariables.ShortcutsNode.Reload),&amp;reload=,]</value>
    </variable>

    <include name="Hub_Standard">
        <include content="Hub_Menu_Group">
            <include content="Hub_Submenu_Group">
                <include>skinvariables-$PARAM[categories]-submenu</include>
            </include>
        </include>

        <include condition="Window.IsVisible(Home)">skinvariables-sidemenu-spotlight</include>
        <include>skinvariables-$PARAM[categories]-spotlight</include>

        <include content="Hub_Widgets_Group">
            <include>skinvariables-$PARAM[categories]-widgets</include>
            <include>Hub_WindowTransition_WidgetsGroup</include>
        </include>

        <include content="Home_Widgets_Infopanel">
            <include content="Info_Panel">
                <param name="container">Container.</param>
                <param name="visible">!Integer.IsEqual(Window.Property(TMDBHelper.WidgetContainer),301)</param>
            </include>
        </include>
    </include>

    <include name="Hub_Main_Group">
        <control type="group" id="320">
            <include>Animation_View_WindowChange</include>
            <include>Animation_Group_Bumper</include>
            <nested />
            <include condition="![$PARAM[widgets_only]]">Spotlight_Info</include>
        </control>
    </include>

    <include name="Hub_Widgets_Group_Furniture">
        <param name="visible">[!Integer.IsEqual(Window.Property(TMDBHelper.WidgetContainer),301) + !String.IsEmpty(Window.Property(TMDBHelper.WidgetContainer)) + !String.IsEmpty(Window.Property(Slide.WidgetContainer))]</param>
        <param name="include_conditionalfade">true</param>
        <definition>
            <control type="group">
                <include content="Animation_ConditionalFade" condition="$PARAM[include_conditionalfade]">
                    <param name="condition">$EXP[Exp_InfoDialogs]</param>
                </include>

                <control type="group">
                    <include content="Animation_Fade_In">
                        <param name="type">Visible</param>
                        <param name="delay">200</param>
                    </include>
                    <visible>$PARAM[visible]</visible>
                    <include content="Animation_ConditionalFade">
                        <param name="condition">Window.IsVisible(1171)</param>
                    </include>
                    <include condition="$EXP[Exp_Footer_BottomLeft_IsVisible]">Furniture_Bottom_Left</include>
                </control>

                <include>Furniture_Bottom_Right</include>

            </control>

        </definition>
    </include>

    <include name="Hub_Widgets_Group">
        <control type="group" id="340">
            <nested />
        </control>
    </include>

    <include name="Hub_Categories">
        <control type="group">
            <visible>!$EXP[Exp_InfoDialogs]</visible>
            <include>Animation_Transition_InfoPanel_Hide</include>
            <include>Hub_WindowTransition_CategoriesSpotlightGroup</include>
            <include content="Spotlight_Main">
                <param name="window_id">$PARAM[window_id]</param>
                <param name="visible">$EXP[Exp_Hubs_Spotlight_HasItems]</param>
            </include>
            <include>Transitions_Lower_Visibility</include>
            <include content="Categories_Selector">
                <param name="window_id">$PARAM[window_id]</param>
                <param name="hitrect_x">-40</param>
                <param name="hitrect_y">700</param>
                <param name="hitrect_w">1640</param>
                <param name="hitrect_h">80</param>
                <param name="shorten">True</param>
                <param name="hidden_button_prefix">Item.$INFO[Container(300).ListItem.Property(item)]302.</param>
                <param name="slide">Skin.HasSetting(Slide.WidgetContainer)</param>

                <include content="Action_View_Movement_OnLeftRight">
                    <param name="id">300</param>
                    <param name="onback">[Integer.IsEqual(Container(300).CurrentItem,1)]</param>
                    <param name="backid">320</param>
                </include>

                <onup condition="$EXP[Exp_Hubs_Spotlight_HasItems]">311</onup>
                <onup condition="!$EXP[Exp_Hubs_Spotlight_HasItems] + [Window.IsVisible(Home) + Skin.String(Home.SideMenuCollapse,Topbar)]">SetFocus(303,9999,absolute)</onup>
                <include content="Action_Widget_Top">
                    <param name="id">300</param>
                    <param name="condition">!$EXP[Exp_Hubs_Spotlight_HasItems] + ![Window.IsVisible(Home) + Skin.String(Home.SideMenuCollapse,Topbar)]</param>
                </include>
                <ondown>302</ondown>
                <onfocus>SetProperty(TMDbHelper.WidgetContainer,301,$PARAM[window_id])</onfocus>

                <content>
                    <include>skinvariables-$PARAM[categories]-staticitems</include>
                </content>

                <animation effect="slide" time="400" start="0,20" end="0" tween="quadratic" easing="out" reversible="false" condition="![!Container(302).IsUpdating + Integer.IsEqual(Container(302).NumItems,0) + Integer.IsEqual(Window.Property(TMDBHelper.WidgetContainer),301)]">Conditional</animation>
                <animation effect="slide" time="400" start="0" end="0,20" tween="quadratic" easing="out" reversible="false" condition="!Container(302).IsUpdating + Integer.IsEqual(Container(302).NumItems,0) + Integer.IsEqual(Window.Property(TMDBHelper.WidgetContainer),301)">Conditional</animation>

                <animation effect="slide" time="400" end="0" start="0,20" tween="quadratic" easing="out" reversible="false" condition="![!String.IsEmpty(Window.Property(Slide.WidgetContainer)) | !$EXP[Exp_Hubs_Spotlight_HasItems]]">Conditional</animation>
                <animation effect="slide" time="400" end="0,20" start="0" tween="quadratic" easing="out" reversible="false" condition="!String.IsEmpty(Window.Property(Slide.WidgetContainer)) | !$EXP[Exp_Hubs_Spotlight_HasItems]">Conditional</animation>

            </include>
        </control>
    </include>

    <include name="Hub_Widgets_Grouplist_Animation_Slide">
        <animation effect="fade" start="100" end="0" delay="400" time="1" reversible="false">Hidden</animation>
        <animation effect="fade" start="100" end="0" reversible="false" condition="String.IsEmpty(Window.Property(WidgetGroup.Movement)) + ![$PARAM[visible]]">Conditional</animation>
        <include content="Animation_Widgets_Grouplist_Slide_In">
            <param name="posy">-440</param>
            <param name="condition">String.IsEqual(Window.Property(WidgetGroup.Movement),Up) + $PARAM[visible]</param>
        </include>
        <include content="Animation_Widgets_Grouplist_Slide_Out">
            <param name="posy">440</param>
            <param name="condition">String.IsEqual(Window.Property(WidgetGroup.Movement),Up) + ![$PARAM[visible]]</param>
        </include>
        <include content="Animation_Widgets_Grouplist_Slide_In">
            <param name="posy">440</param>
            <param name="condition">String.IsEqual(Window.Property(WidgetGroup.Movement),Down) + $PARAM[visible]</param>
        </include>
        <include content="Animation_Widgets_Grouplist_Slide_Out">
            <param name="posy">-440</param>
            <param name="condition">String.IsEqual(Window.Property(WidgetGroup.Movement),Down) + ![$PARAM[visible]]</param>
        </include>
    </include>

    <include name="Hub_Widgets_Grouplist">
        <control type="grouplist" id="$PARAM[id]">
            <top>hub_widgets_grouplist_t</top>
            <bottom>hub_widgets_grouplist_b</bottom>

            <include condition="![$PARAM[widgets_only]]">Hub_Widgets_Grouplist__Def_Layout_Expanded</include>
            <include condition="[[$PARAM[widgets_only]]]" content="Hub_Widgets_Grouplist__Def_Layout_Basic">
                <param name="id">$PARAM[id]</param>
            </include>

            <include content="Action_Widget_End">
                <param name="topid">$PARAM[topid]</param>
                <param name="id">$PARAM[id]</param>
            </include>

            <visible>$PARAM[visible]</visible>

            <!-- <include content="Animation_ConditionalFade">
                <param name="condition">Control.HasFocus($PARAM[topid]) | Control.HasFocus($PARAM[bottomid])</param>
            </include> -->

            <include content="Hub_Widgets_Grouplist_Animation_Slide" condition="Window.IsVisible(Home) + Skin.HasSetting(Hub.Home.DisableSubmenu)">
                <param name="visible">$PARAM[visible]</param>
            </include>

            <control type="group" id="$PARAM[bumperid]">
                <height>widget_tbump_h</height>
            </control>

            <control type="button" id="$PARAM[topid]">
                <height>0</height>
                <texturenofocus />
                <texturefocus />

                <onleft>303</onleft>
                <onback>303</onback>
                <onright>303</onright>

                <onfocus condition="[Control.IsVisible($PARAM[topid]) + Control.IsVisible($PARAM[bottomid]) + !Integer.IsEqual(Container($PARAM[id]).NumItems,2)] | [!Control.IsVisible($PARAM[topid]) + Control.IsVisible($PARAM[bottomid]) + !Integer.IsEqual(Container($PARAM[id]).NumItems,1)] | [Control.IsVisible($PARAM[topid]) + !Control.IsVisible($PARAM[bottomid]) + !Integer.IsEqual(Container($PARAM[id]).NumItems,1)] | [!Control.IsVisible($PARAM[topid]) + !Control.IsVisible($PARAM[bottomid]) + !Integer.IsEqual(Container($PARAM[id]).NumItems,0)]">Action(Down)</onfocus>

                <visible>!ControlGroup($PARAM[id]).HasFocus() | Control.HasFocus($PARAM[topid])</visible>
            </control>

            <nested />

            <control type="button" id="$PARAM[bottomid]">
                <height>0</height>
                <texturenofocus />
                <texturefocus />

                <onleft>303</onleft>
                <onback>303</onback>
                <onright>303</onright>

                <onfocus condition="[Control.IsVisible($PARAM[topid]) + Control.IsVisible($PARAM[bottomid]) + !Integer.IsEqual(Container($PARAM[id]).NumItems,2)] | [!Control.IsVisible($PARAM[topid]) + Control.IsVisible($PARAM[bottomid]) + !Integer.IsEqual(Container($PARAM[id]).NumItems,1)] | [Control.IsVisible($PARAM[topid]) + !Control.IsVisible($PARAM[bottomid]) + !Integer.IsEqual(Container($PARAM[id]).NumItems,1)] | [!Control.IsVisible($PARAM[topid]) + !Control.IsVisible($PARAM[bottomid]) + !Integer.IsEqual(Container($PARAM[id]).NumItems,0)]">Action(Up)</onfocus>

                <visible>!ControlGroup($PARAM[id]).HasFocus() | Control.HasFocus($PARAM[bottomid])</visible>
            </control>

            <control type="group" id="$PARAM[furnitureid]">
                <height>0</height>
                <control type="group">
                    <visible>!Integer.IsEqual(Window.Property(TMDBHelper.WidgetContainer),301) | Skin.HasSetting(Slide.WidgetContainer)</visible>
                    <visible>!Integer.IsEqual(Container($PARAM[id]).NumItems,0)</visible>
                    <visible>!Integer.IsEqual(Container($PARAM[id]).NumItems,1) | [!Control.HasFocus($PARAM[topid]) + !Control.HasFocus($PARAM[bottomid])]</visible>
                    <visible>!Integer.IsEqual(Container($PARAM[id]).NumItems,2) | ControlGroup($PARAM[id]).HasFocus()</visible>
                    <visible>!$EXP[Exp_InfoDialogs]</visible>
                    <!-- <include condition="!Skin.HasSetting(Hubs.WidgetSelector)">Furniture_Bottom_Left</include>
                    <include>Furniture_Bottom_Right</include> -->
                    <include condition="!Skin.HasSetting(Hubs.WidgetSelector)">Furniture_Bottom_WidgetGroups</include>
                </control>
            </control>
        </control>
    </include>

    <include name="Home_Widgets_Infopanel">
        <param name="visible">True</param>
        <param name="conditional_fade">Window.IsActive(1105)</param>
        <definition>
            <control type="group">
                <width>info_panel_w</width>
                <height>300</height>
                <left>view_side</left>
                <top>view_top</top>
                <visible>$PARAM[visible]</visible>
                <include>Animation_Transition_InfoPanel_Cond</include>
                <animation effect="fade" start="100" end="0" condition="$PARAM[conditional_fade]" reversible="false">Conditional</animation>
                <animation effect="fade" start="0" end="100" delay="200" time="200" tween="sine" easing="in" condition="![$PARAM[conditional_fade]]" reversible="false">Conditional</animation>
                <nested />
            </control>
        </definition>
    </include>

    <include name="Hub_Widgets_Grouplist__Def_Layout_Expanded">
        <onup>302</onup>
    </include>

    <include name="Hub_Widgets_Grouplist__Def_Layout_Basic">
        <include content="Action_Widget_Top" condition="![Window.IsVisible(Home) + Skin.String(Home.SideMenuCollapse,Topbar)]">
            <param name="id">$PARAM[id]</param>
        </include>
        <onup condition="Window.IsVisible(Home) + Skin.String(Home.SideMenuCollapse,Topbar)">SetFocus(303,9999,absolute)</onup>
        <!-- <animation effect="slide" end="0,hub_widgets_nocategories_s" condition="true">Conditional</animation> -->
    </include>
</includes>